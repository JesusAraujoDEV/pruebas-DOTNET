// <auto-generated />
using System;
using LibrosAutoresApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibrosApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250619041429_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibrosAutoresApi.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.AutorEvento", b =>
                {
                    b.Property<int>("AutorId")
                        .HasColumnType("integer");

                    b.Property<int>("EventoId")
                        .HasColumnType("integer");

                    b.HasKey("AutorId", "EventoId");

                    b.HasIndex("EventoId");

                    b.ToTable("AutorEventos");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Biografia", b =>
                {
                    b.Property<int>("AutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AutorId");

                    b.ToTable("Biografias");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnioPublicacion")
                        .HasColumnType("integer");

                    b.Property<int>("AutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.AutorEvento", b =>
                {
                    b.HasOne("LibrosAutoresApi.Models.Autor", "Autor")
                        .WithMany("AutorEventos")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrosAutoresApi.Models.Evento", "Evento")
                        .WithMany("AutorEventos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Biografia", b =>
                {
                    b.HasOne("LibrosAutoresApi.Models.Autor", "Autor")
                        .WithOne("Biografia")
                        .HasForeignKey("LibrosAutoresApi.Models.Biografia", "AutorId");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Libro", b =>
                {
                    b.HasOne("LibrosAutoresApi.Models.Autor", "Autor")
                        .WithMany("Libros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Autor", b =>
                {
                    b.Navigation("AutorEventos");

                    b.Navigation("Biografia");

                    b.Navigation("Libros");
                });

            modelBuilder.Entity("LibrosAutoresApi.Models.Evento", b =>
                {
                    b.Navigation("AutorEventos");
                });
#pragma warning restore 612, 618
        }
    }
}
